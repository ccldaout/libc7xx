# -*- mode: Makefile -*-
#
# Makefile.common
#
# Copyright (c) 2019 ccldaout@gmail.com
#
# This software is released under the MIT License.
# http://opensource.org/licenses/mit-license.php
#

-include ../../config.mk
-include ../config.mk
-include config.mk

MAKE_JOBS ?= 8

ifeq "$(findstring CYGWIN,$(shell uname -s))" ""
  C7_LIBSFX = so
  C7_SODIR = lib
else
  C7_LIBSFX = dll
  C7_SODIR = bin
endif

C7_OUT_ROOT   ?= ../build
C7_OUT_INCNAM ?= include
C7_OUT_PY2NAM ?= python2
C7_OUT_PY3NAM ?= python3
C7_OUT_BINDIR ?= $(C7_OUT_ROOT)/bin
C7_OUT_INCDIR ?= $(C7_OUT_ROOT)/$(C7_OUT_INCNAM)
C7_OUT_LIBDIR ?= $(C7_OUT_ROOT)/$(C7_SODIR)
C7_OUT_PY2DIR ?= $(C7_OUT_ROOT)/lib/$(C7_OUT_PY2NAM)
C7_OUT_PY3DIR ?= $(C7_OUT_ROOT)/lib/$(C7_OUT_PY3NAM)
C7_TARGET_EXE ?= $(C7_OUT_BINDIR)/$(C7_TARGET_BASE)
C7_TARGET_LIB ?= $(C7_OUT_LIBDIR)/$(C7_TARGET_BASE).$(C7_LIBSFX).$(C7_VER_MAJOR).$(C7_VER_MINOR).$(C7_VER_PATCH)
C7_TMP_ROOT   ?= $(C7_OUT_ROOT)/tmp
C7_OUT_TMPDIR ?= $(C7_TMP_ROOT)/$(C7_TARGET_BASE)$(C7_DBGSFX).$(C7_VER_MAJOR).$(C7_VER_MINOR)
C7_OUT_OBJDIR ?= $(C7_OUT_TMPDIR)/obj

ifneq "$(C7_RTLD_LIBDIR_REL)" ""
  C7_RTLD_LIBDIR ?= '$$ORIGIN'/$(C7_RTLD_LIBDIR_REL)
endif

C7_DIRS = $(sort $(C7_OUT_BINDIR) $(C7_OUT_INCDIR) $(C7_OUT_LIBDIR) $(C7_OUT_PY2DIR) $(C7_OUT_PY3DIR) $(C7_OUT_OBJDIR))

C7_CC_IPATH += $(C7_OUT_INCDIR)
C7_LD_LPATH += $(C7_OUT_LIBDIR)
C7_LD_RPATH += $(C7_RTLD_LIBDIR) $(C7_OUT_LIBDIR)
C7_LD_RPATH_OPT = -Wl,-rpath,

# DON'T assign $(C7_OUT_ROOT) to C7_CLEAN_REMOVED
C7_CLEAN_REMOVED += $(C7_TMP_ROOT)

CXX      ?= c++
CXX_STD  ?= c++17
CXXFLAGS += -std=$(CXX_STD) $(if $(C7_NOTHREAD),,-pthread)
CXXFLAGS += $(addprefix -I,$(C7_CC_IPATH))
CXXFLAGS += -Wall $(if $(C7_WERROR),-Werror,)

AS      ?= as
ifeq "$(shell uname -m)" "x86_64"
  ASFLAGS += --64 -noexecstack
endif

LDFLAGS = $(addprefix -L,$(C7_LD_LPATH)) $(addprefix $(C7_LD_RPATH_OPT),$(C7_LD_RPATH))
LDLIBS  = $(if $(C7_NOLIBC7XX),,-lc7++) $(if $(C7_NOTHREAD),,-lpthread) -lutil

ifeq "$(wildcard DEBUG)" ""
  C7_ECHO_BEG="\x1b[32m"
  C7_ECHO_END="\x1b[0m"
  CXXFLAGS += -O3
else
  C7_ECHO_BEG="\x1b[33m"
  C7_ECHO_END="\x1b[0m"
  C7_DBGSFX = .g
  CXXFLAGS += -g2 -O0 -D__C7_DEBUG
  LDFLAGS  += -g
endif

CXXFLAGS += $(CXXFLAGS_TAIL)

ifeq (,$(findstring s,$(MAKEFLAGS)))
  C7_ECHO = /bin/echo -e
else
  C7_ECHO = :
endif

define cmd_o
  @$(C7_ECHO) $(C7_ECHO_BEG)$(subst $(HOME),\~,$(subst $(C7_OUT_OBJDIR)/,,$1))$(C7_ECHO_END)
  @$1
endef

define cmd_bin
  @$(C7_ECHO) $(C7_ECHO_BEG)$(subst $(HOME),\~,$(subst $(C7_OUT_BINDIR)/,,$1))$(C7_ECHO_END)
  @$1
endef

$(C7_OUT_PY2DIR)/%.py: %.py
	$(call cmd_o,cp -p $< $@)

$(C7_OUT_PY3DIR)/%.py: %.py
	$(call cmd_o,cp -p $< $@)

$(C7_OUT_BINDIR)/%: %.cpp
	$(call cmd_bin,$(CXX) $(CXXFLAGS) -o $@ $< $(LDFLAGS) $(LDLIBS))

$(C7_OUT_OBJDIR)/%.o: %.cpp
	$(call cmd_o,$(CXX) -c $(CXXFLAGS) -o $@ $<)

$(C7_OUT_OBJDIR)/%.o: %.s
	$(call cmd_o,$(AS) $(ASFLAGS) -o $@ $<)

.PHONY: c7_build
c7_build: build

.PHONY: debug
debug:
	@mkdir -p DEBUG
	@make --no-print-directory

.PHONY: nodebug
nodebug:
	@rm -fr DEBUG
	@make --no-print-directory

.PHONY: init
init: 
	@mkdir -p $(C7_DIRS)

.PHONY: clean
clean:
	$(call cmd_bin,rm -fr $(C7_CLEAN_REMOVED))
	@mkdir -p $(C7_DIRS)
